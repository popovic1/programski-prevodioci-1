

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, CONST, ASSIGN, SEMI, COMMA, CHAR, BOOL, OR;
terminal LBRACKET, RBRACKET, STATIC, LPAREN, RPAREN, VOID, COLON, IF, ELSE, BREAK, CONTINUE, RETURN;
terminal READ, PRINT, INCREMENT, DECREMENT, AND, PLUS, MINUS, NEW, DOT, ASTERISK, FORWARD_SLASH, PERCENT;
terminal EQUAL, NOT_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal Program, VarOrConstDeclList, MethodDeclList, VarOrConstDecl, VarDecl, ConstDecl, Type, Const, ConstDeclSuffix;
nonterminal BracketsOpt, VarDeclSuffix, VarDeclList, StaticInitializer, StatementList, MethodDecl, TypeOrVoid, FormParsOpt;
nonterminal FormPars, FormParsList, Statement, DesignatorStatement, Condition, Expr, Designator, Assignop, ActPars;
nonterminal CommaExprList, CondTerm, OrCondTermList, CondFact, AndCondFactList, Relop, Term, AddopTermList, Addop;
nonterminal Factor, MulopFactorList, Mulop, DesignatorSuffix, Label;

Program ::= (Program) PROG IDENT VarOrConstDeclList LBRACE MethodDeclList RBRACE;

VarOrConstDecl ::= (VarOrConstDeclVar) VarDecl
				| (VarOrConstDeclConst) ConstDecl
				;

VarOrConstDeclList ::= (VarOrConstDeclList1) VarOrConstDeclList VarOrConstDecl
					| (NoVarOrConstDeclList) /* epsilon */
					;

ConstDecl ::= (ConstDecl1) CONST Type IDENT ASSIGN Const ConstDeclSuffix SEMI;

ConstDeclSuffix ::= (ConstDeclSuffix1) ConstDeclSuffix COMMA IDENT ASSIGN Const
				| (NoConstDeclSuffix) /* epsilon */
				;

Const ::= (ConstNum) NUMBER
		| (ConstChar) CHAR
		| (ConstBool) BOOL
		;

VarDecl ::= (VarDecl1) Type IDENT BracketsOpt VarDeclSuffix SEMI
		| (VarDeclErrorComma) COMMA error:l {: parser.report_error("Izvrsen oporavak pri deklaraciji globalnih promjenjivih do , u liniji " + lleft, null); :}
		| (VarDeclErrorSemi) SEMI error:l {: parser.report_error("Izvrsen oporavak pri deklaraciji globalnih promjenjivih do ; u liniji " + lleft, null); :}
		;

VarDeclList ::= (VarDeclList1) VarDeclList VarDecl
			| (NoVarDeclList) /* epsilon */
			;

BracketsOpt ::= (BracketsOpt1) LBRACKET RBRACKET
			| (BracketsOpt2) LBRACKET RBRACKET LBRACKET RBRACKET
 			| (NoBracketsOpt) /* epsilon */
			;

VarDeclSuffix ::= (VarDeclSuffix1) COMMA Type IDENT BracketsOpt
				| (NoVarDeclSuffix) /* epsilon */
				;

StaticInitializer ::= (StaticInitializer1) STATIC LBRACE StatementList RBRACE;

MethodDecl ::= (MethodDecl1) TypeOrVoid IDENT LPAREN FormParsOpt RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodDeclList ::= (MethodDeclList1) MethodDeclList MethodDecl
				| (NoMethodDeclList) /* epsilon */
				;

FormParsOpt ::= (FormParsOpt1) FormPars
			| (NoFormParsOpt) /* epsilon */
			;

TypeOrVoid ::= (TypeOrVoidType) Type
			| (TypeOrVoidVoid) VOID
			;

FormPars ::= (FormPars1) Type IDENT FormParsList
			| (FormPars2) Type IDENT LBRACKET RBRACKET FormParsList
			;

FormParsList ::= (FormParsList1) FormParsList COMMA Type IDENT
				| (FormParsList2) FormParsList COMMA Type IDENT LBRACKET RBRACKET
				| (NoFormParsList) /* epsilon */
				;

Type ::= (Type1) IDENT
		| (Type2) IDENT COLON COLON IDENT
		;

Statement ::= (Statement1) DesignatorStatement SEMI
			| (StatementIf) IF LPAREN Condition RPAREN Statement
			| (StatementBreak) BREAK SEMI
			| (StatementContinue) CONTINUE SEMI
			| (StatementReturnExpr) RETURN Expr SEMI
			| (StatementReturn) RETURN SEMI
			| (StatementRead) READ LPAREN Designator RPAREN SEMI
			| (StatementPrintExpr) PRINT LPAREN Expr RPAREN SEMI
			| (StatementPrintExprWithNum) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			| (Statement2) LBRACE StatementList RBRACE
			;

StatementList ::= (StatementList1) StatementList Statement
				| (NoStatementList) /* epsilon */
				;

DesignatorStatement ::= (DesignatorStatement1) Designator Assignop Expr
					| (DesignatorStatement2) Designator LPAREN ActPars RPAREN
					| (DesignatorStatementInc) Designator INCREMENT
					| (DesignatorStatementDec) Designator DECREMENT
					| (DesignatorStatementError) SEMI error:l {: parser.report_error("Izvrsen oporavak pri designator statement-u do ; u liniji " + lleft, null); :}
					;

ActPars ::= (ActPars1) Expr CommaExprList
		| (NoActPars) /* epsilon */
		;

CommaExprList ::= (CommaExprList1) CommaExprList COMMA Expr
				| (NoCommaExprList) /* epsilon */
				;

Condition ::= (Condition1) CondTerm OrCondTermList;

OrCondTermList ::= (OrCondTermList1) OrCondTermList OR CondTerm
				| (NoOrCondTermList) /* epsilon */
				;

CondTerm ::= (CondTerm1) CondFact AndCondFactList;

AndCondFactList ::= (AndCondFactList1) AndCondFactList AND CondFact
				| (NoAndCondFactList) /* epsilon */
				;

CondFact ::= (CondFact1) Expr
			| (CondFact2) Expr Relop Expr
			;

Expr ::= (ExprPlus) Term AddopTermList
		| (ExprMinus) MINUS Term AddopTermList
		;

AddopTermList ::= (AddopTermList1) AddopTermList Addop Term
				| (NoAddopTermList) /* epsilon */
				;

Term ::= (Term1) Factor MulopFactorList;

MulopFactorList ::= (MulopFactorList1) MulopFactorList Mulop Factor
				| (NoMulopFactorList) /* epsilon */
				;

Factor ::= (Factor1) Designator
		| (Factor2) Designator LPAREN ActPars RPAREN
		| (FactorNum) NUMBER
		| (FactorChar) CHAR
		| (FactorBool) BOOL
		| (Factor3) NEW Type LBRACKET Expr RBRACKET
		| (Factor4) NEW Type LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET
		| (Factor5) NEW Type LPAREN ActPars RPAREN
		| (Factor6) LPAREN Expr RPAREN
		;

Designator ::= (Designator1) IDENT DesignatorSuffix
               |
               (Designator2) IDENT COLON COLON IDENT DesignatorSuffix
               ;
               
DesignatorSuffix ::= (DesignatorSuffix1) DesignatorSuffix DOT IDENT
                   |
                   (DesignatorSuffix2)  DesignatorSuffix LBRACKET Expr RBRACKET
				   |
				   (NoDesignatorSuffix) /* epsilon */
                   ;

Label ::= (LabelClass) IDENT;

Assignop ::= (Assignop) ASSIGN;

Relop ::= (Equalop) EQUAL
		| (NotEqualop) NOT_EQUAL
		| (GreaterThanop) GREATER_THAN
		| (GreaterThanOrEqualop) GREATER_THAN_OR_EQUAL
		| (LessThanop) LESS_THAN
		| (LessThanOrEqualop) LESS_THAN_OR_EQUAL
		;

Addop ::= (AddopPlus) PLUS
		| (Subop) MINUS
		;
		
Mulop ::= (Mulop) ASTERISK
		| (Divop) FORWARD_SLASH
		| (Modop) PERCENT
		;

