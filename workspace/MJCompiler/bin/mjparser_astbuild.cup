

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, CONST, ASSIGN, SEMI, COMMA, OR;
terminal LBRACKET, RBRACKET, STATIC, LPAREN, RPAREN, VOID, COLON, IF, ELSE, BREAK, CONTINUE, RETURN;
terminal READ, PRINT, INCREMENT, DECREMENT, AND, PLUS, MINUS, NEW, DOT, ASTERISK, FORWARD_SLASH, PERCENT;
terminal EQUAL, NOT_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL;
terminal Integer NUMBER;
terminal String IDENT;
terminal Character CHAR;
terminal Boolean BOOL;

nonterminal VarOrConstDeclList VarOrConstDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarOrConstDecl VarOrConstDecl;
nonterminal VarDecl VarDecl;
nonterminal Const Const;
nonterminal BracketsOpt BracketsOpt;
nonterminal VarDeclSuffix VarDeclSuffix;
nonterminal VarDeclList VarDeclList;
nonterminal StaticInitializer StaticInitializer;
nonterminal StatementList StatementList;
nonterminal TypeOrVoid TypeOrVoid;
nonterminal FormParsOpt FormParsOpt;
nonterminal FormPars FormPars;
nonterminal FormParsList FormParsList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Condition Condition;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal CommaExprList CommaExprList;
nonterminal CondTerm CondTerm;
nonterminal OrCondTermList OrCondTermList;
nonterminal CondFact CondFact;
nonterminal AndCondFactList AndCondFactList;
nonterminal Relop Relop;
nonterminal AddopTermList AddopTermList;
nonterminal Addop Addop;
nonterminal MulopFactorList MulopFactorList;
nonterminal Mulop Mulop;
nonterminal Label Label;
nonterminal Empty Empty;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, VarDeclElems, ConstDeclSuffix, ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr;

Program ::= (Program) PROG ProgName:progName VarOrConstDeclList:V1 LBRACE MethodDecl:M2 RBRACE {: RESULT=new Program(progName, V1, M2); RESULT.setLine(progNameleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

VarOrConstDecl ::= (VarOrConstDeclVar) VarDecl:V1 {: RESULT=new VarOrConstDeclVar(V1); RESULT.setLine(V1left); :}
				| (VarOrConstDeclConst) ConstDecl:C1 {: RESULT=new VarOrConstDeclConst(C1); RESULT.setLine(C1left); :}
				;

VarOrConstDeclList ::= (VarOrConstDeclList1) VarOrConstDeclList:V1 VarOrConstDecl:V2 {: RESULT=new VarOrConstDeclList1(V1, V2); RESULT.setLine(V1left); :}
					| (NoVarOrConstDeclList) {: RESULT=new NoVarOrConstDeclList(); :} /* epsilon */
					;

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstDeclSuffix:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstDeclSuffix ::= (ConstDeclSuffixNum1) ConstDeclSuffix:C1 COMMA IDENT:constName ASSIGN NUMBER:literal {: RESULT=new ConstDeclSuffixNum1(C1, constName, literal); RESULT.setLine(C1left); :}
				| (ConstDeclSuffixNum2) IDENT:constName ASSIGN NUMBER:literal {: RESULT=new ConstDeclSuffixNum2(constName, literal); RESULT.setLine(constNameleft); :}
				| (ConstDeclSuffixChar1) ConstDeclSuffix:C1 COMMA IDENT:constName ASSIGN CHAR:ch {: RESULT=new ConstDeclSuffixChar1(C1, constName, ch); RESULT.setLine(C1left); :}
				| (ConstDeclSuffixChar2) IDENT:constName ASSIGN CHAR:ch {: RESULT=new ConstDeclSuffixChar2(constName, ch); RESULT.setLine(constNameleft); :}
				| (ConstDeclSuffixBool1) ConstDeclSuffix:C1 COMMA IDENT:constName ASSIGN BOOL:bo {: RESULT=new ConstDeclSuffixBool1(C1, constName, bo); RESULT.setLine(C1left); :}
				| (ConstDeclSuffixBool2) IDENT:constName ASSIGN BOOL:bo {: RESULT=new ConstDeclSuffixBool2(constName, bo); RESULT.setLine(constNameleft); :}
				;

Const ::= (ConstNum) NUMBER:N1 {: RESULT=new ConstNum(N1); RESULT.setLine(N1left); :}
		| (ConstChar) CHAR:C1 {: RESULT=new ConstChar(C1); RESULT.setLine(C1left); :}
		| (ConstBool) BOOL:B1 {: RESULT=new ConstBool(B1); RESULT.setLine(B1left); :}
		;
		
VarDeclList ::= (VarDeclList1) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclList1(V1, V2); RESULT.setLine(V1left); :}
			| (NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
			;

VarDecl ::= (VarDecl1) Type:T1 VarDeclElems:V2 SEMI {: RESULT=new VarDecl1(T1, V2); RESULT.setLine(T1left); :}
		| (VarDeclErrorComma) COMMA error:l {: parser.report_error("Izvrsen oporavak pri deklaraciji globalnih promjenjivih do , u liniji " + lleft, null); :} {: RESULT=new VarDeclErrorComma(); :}
		| (VarDeclErrorSemi) SEMI error:l {: parser.report_error("Izvrsen oporavak pri deklaraciji globalnih promjenjivih do ; u liniji " + lleft, null); :} {: RESULT=new VarDeclErrorSemi(); :}
		;

BracketsOpt ::= (BracketsOptArray) LBRACKET RBRACKET {: RESULT=new BracketsOptArray(); :}
			| (BracketsOptMatrix) LBRACKET RBRACKET LBRACKET RBRACKET {: RESULT=new BracketsOptMatrix(); :}
 			| (NoBracketsOpt) {: RESULT=new NoBracketsOpt(); :} /* epsilon */
			;
			
VarDeclElems ::= (VarDeclElems1Multiple) VarDeclElems:V1 COMMA IDENT:varName {: RESULT=new VarDeclElems1Multiple(V1, varName); RESULT.setLine(V1left); :}
		| (VarDeclElemsArrayMultiple) VarDeclElems:V1 COMMA IDENT:varName LBRACKET RBRACKET {: RESULT=new VarDeclElemsArrayMultiple(V1, varName); RESULT.setLine(V1left); :}
		| (VarDeclElemsMatrixMultiple) VarDeclElems:V1 COMMA IDENT:varName LBRACKET RBRACKET LBRACKET RBRACKET {: RESULT=new VarDeclElemsMatrixMultiple(V1, varName); RESULT.setLine(V1left); :}
		| (VarDeclElems1) IDENT:varName {: RESULT=new VarDeclElems1(varName); RESULT.setLine(varNameleft); :}
		| (VarDeclElemsArray) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarDeclElemsArray(varName); RESULT.setLine(varNameleft); :}
		| (VarDeclElemsMatrix) IDENT:varName LBRACKET RBRACKET LBRACKET RBRACKET {: RESULT=new VarDeclElemsMatrix(varName); RESULT.setLine(varNameleft); :}
		;
		
		
VarDeclSuffix ::= (VarDeclSuffix1) VarDeclSuffix:V1 COMMA Type:T2 IDENT:I3 BracketsOpt:B4 {: RESULT=new VarDeclSuffix1(V1, T2, I3, B4); RESULT.setLine(V1left); :}
				| (NoVarDeclSuffix) {: RESULT=new NoVarDeclSuffix(); :} /* epsilon */
				;

StaticInitializer ::= (StaticInitializer1) STATIC LBRACE StatementList:S1 RBRACE {: RESULT=new StaticInitializer1(S1); RESULT.setLine(S1left); :};

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(M1, V2, S3); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeNameVoid) VOID IDENT:methName {: RESULT=new MethodTypeNameVoid(methName); RESULT.setLine(methNameleft); :};

MethodDeclList ::= (MethodDeclList1) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclList1(M1, M2); RESULT.setLine(M1left); :}
				| (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */
				;

FormParsOpt ::= (FormParsOpt1) FormPars:F1 {: RESULT=new FormParsOpt1(F1); RESULT.setLine(F1left); :}
			| (NoFormParsOpt) {: RESULT=new NoFormParsOpt(); :} /* epsilon */
			;

TypeOrVoid ::= (TypeOrVoidType) Type:T1 {: RESULT=new TypeOrVoidType(T1); RESULT.setLine(T1left); :}
			| (TypeOrVoidVoid) VOID {: RESULT=new TypeOrVoidVoid(); :}
			;

FormPars ::= (FormPars1) Type:T1 IDENT:I2 FormParsList:F3 {: RESULT=new FormPars1(T1, I2, F3); RESULT.setLine(T1left); :}
			| (FormPars2) Type:T1 IDENT:I2 LBRACKET RBRACKET FormParsList:F3 {: RESULT=new FormPars2(T1, I2, F3); RESULT.setLine(T1left); :}
			;

FormParsList ::= (FormParsList1) FormParsList:F1 COMMA Type:T2 IDENT:I3 {: RESULT=new FormParsList1(F1, T2, I3); RESULT.setLine(F1left); :}
				| (FormParsList2) FormParsList:F1 COMMA Type:T2 IDENT:I3 LBRACKET RBRACKET {: RESULT=new FormParsList2(F1, T2, I3); RESULT.setLine(F1left); :}
				| (NoFormParsList) {: RESULT=new NoFormParsList(); :} /* epsilon */
				;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}
		;

Statement ::= (Statement1) DesignatorStatement:D1 SEMI {: RESULT=new Statement1(D1); RESULT.setLine(D1left); :}
			| (StatementIf) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new StatementIf(C1, S2); RESULT.setLine(C1left); :}
			| (StatementBreak) BREAK SEMI {: RESULT=new StatementBreak(); :}
			| (StatementContinue) CONTINUE SEMI {: RESULT=new StatementContinue(); :}
			| (StatementReturnExpr) RETURN Expr:E1 SEMI {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :}
			| (StatementReturn) RETURN SEMI {: RESULT=new StatementReturn(); :}
			| (StatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
			| (StatementPrintExpr) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new StatementPrintExpr(E1); RESULT.setLine(E1left); :}
			| (StatementPrintExprWithNum) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new StatementPrintExprWithNum(E1, N2); RESULT.setLine(E1left); :}
			| (Statement2) LBRACE StatementList:S1 RBRACE {: RESULT=new Statement2(S1); RESULT.setLine(S1left); :}
			;

StatementList ::= (StatementList1) StatementList:S1 Statement:S2 {: RESULT=new StatementList1(S1, S2); RESULT.setLine(S1left); :}
				| (NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
				;

DesignatorStatement ::= (DesignatorStatement1) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStatement1(D1, A2, E3); RESULT.setLine(D1left); :}
					| (DesignatorStatement2) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorStatement2(D1, A2); RESULT.setLine(D1left); :}
					| (DesignatorStatementInc) Designator:D1 INCREMENT {: RESULT=new DesignatorStatementInc(D1); RESULT.setLine(D1left); :}
					| (DesignatorStatementDec) Designator:D1 DECREMENT {: RESULT=new DesignatorStatementDec(D1); RESULT.setLine(D1left); :}
					| (DesignatorStatementError) SEMI error:l {: parser.report_error("Izvrsen oporavak pri designator statement-u do ; u liniji " + lleft, null); :} {: RESULT=new DesignatorStatementError(); :}
					;

ActPars ::= (ActPars1) Expr:E1 CommaExprList:C2 {: RESULT=new ActPars1(E1, C2); RESULT.setLine(E1left); :}
		| (NoActPars) {: RESULT=new NoActPars(); :} /* epsilon */
		;

CommaExprList ::= (CommaExprList1) CommaExprList:C1 COMMA Expr:E2 {: RESULT=new CommaExprList1(C1, E2); RESULT.setLine(C1left); :}
				| (NoCommaExprList) {: RESULT=new NoCommaExprList(); :} /* epsilon */
				;

Condition ::= (Condition1) CondTerm:C1 OrCondTermList:O2 {: RESULT=new Condition1(C1, O2); RESULT.setLine(C1left); :};

OrCondTermList ::= (OrCondTermList1) OrCondTermList:O1 OR CondTerm:C2 {: RESULT=new OrCondTermList1(O1, C2); RESULT.setLine(O1left); :}
				| (NoOrCondTermList) {: RESULT=new NoOrCondTermList(); :} /* epsilon */
				;

CondTerm ::= (CondTerm1) CondFact:C1 AndCondFactList:A2 {: RESULT=new CondTerm1(C1, A2); RESULT.setLine(C1left); :};

AndCondFactList ::= (AndCondFactList1) AndCondFactList:A1 AND CondFact:C2 {: RESULT=new AndCondFactList1(A1, C2); RESULT.setLine(A1left); :}
				| (NoAndCondFactList) {: RESULT=new NoAndCondFactList(); :} /* epsilon */
				;

CondFact ::= (CondFact1) Expr:E1 {: RESULT=new CondFact1(E1); RESULT.setLine(E1left); :}
			| (CondFact2) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFact2(E1, R2, E3); RESULT.setLine(E1left); :}
			;

Expr ::= (ExprPlus) Term:T1 AddopTermList:A2 {: RESULT=new ExprPlus(T1, A2); RESULT.setLine(T1left); :}
		| (ExprMinus) MINUS Term:T1 AddopTermList:A2 {: RESULT=new ExprMinus(T1, A2); RESULT.setLine(T1left); :}
		;

AddopTermList ::= (AddopTermList1) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermList1(A1, A2, T3); RESULT.setLine(A1left); :}
				| (NoAddopTermList) {: RESULT=new NoAddopTermList(); :} /* epsilon */
				;

Term ::= (Term1) Factor:F1 MulopFactorList:M2 {: RESULT=new Term1(F1, M2); RESULT.setLine(F1left); :};

MulopFactorList ::= (MulopFactorList1) MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorList1(M1, M2, F3); RESULT.setLine(M1left); :}
				| (NoMulopFactorList) {: RESULT=new NoMulopFactorList(); :} /* epsilon */
				;

Factor ::= (Factor1) Designator:D1 {: RESULT=new Factor1(D1); RESULT.setLine(D1left); :}
		| (Factor2) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new Factor2(D1, A2); RESULT.setLine(D1left); :}
		| (FactorNum) NUMBER:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
		| (FactorChar) CHAR:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
		| (FactorBool) BOOL:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
		| (Factor3) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new Factor3(T1, E2); RESULT.setLine(T1left); :}
		| (Factor4) NEW Type:T1 LBRACKET Expr:E2 RBRACKET LBRACKET Expr:E3 RBRACKET {: RESULT=new Factor4(T1, E2, E3); RESULT.setLine(T1left); :}
		| (Factor5) NEW Type:T1 LPAREN ActPars:A2 RPAREN {: RESULT=new Factor5(T1, A2); RESULT.setLine(T1left); :}
		| (Factor6) LPAREN Expr:E1 RPAREN {: RESULT=new Factor6(E1); RESULT.setLine(E1left); :}
		;
		
Empty ::= (Empty) {: RESULT=new Empty(); :};

Designator ::= (Designator1) IDENT:desName {: RESULT=new Designator1(desName); RESULT.setLine(desNameleft); :}
			| (DesignatorArray) IDENT:desName LBRACKET Expr:E1 RBRACKET {: RESULT=new DesignatorArray(desName, E1); RESULT.setLine(desNameleft); :}
			| (DesignatorMatrix) IDENT:desName LBRACKET Expr:exa RBRACKET LBRACKET Expr:exb RBRACKET {: RESULT=new DesignatorMatrix(desName, exa, exb); RESULT.setLine(desNameleft); :}
            ;

Label ::= (LabelClass) IDENT:I1 {: RESULT=new LabelClass(I1); RESULT.setLine(I1left); :};

Assignop ::= (Assignop) ASSIGN {: RESULT=new Assignop(); :};

Relop ::= (Equalop) EQUAL {: RESULT=new Equalop(); :}
		| (NotEqualop) NOT_EQUAL {: RESULT=new NotEqualop(); :}
		| (GreaterThanop) GREATER_THAN {: RESULT=new GreaterThanop(); :}
		| (GreaterThanOrEqualop) GREATER_THAN_OR_EQUAL {: RESULT=new GreaterThanOrEqualop(); :}
		| (LessThanop) LESS_THAN {: RESULT=new LessThanop(); :}
		| (LessThanOrEqualop) LESS_THAN_OR_EQUAL {: RESULT=new LessThanOrEqualop(); :}
		;

Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
		| (Subop) MINUS {: RESULT=new Subop(); :}
		;
		
Mulop ::= (Mulop) ASTERISK {: RESULT=new Mulop(); :}
		| (Divop) FORWARD_SLASH {: RESULT=new Divop(); :}
		| (Modop) PERCENT {: RESULT=new Modop(); :}
		;

